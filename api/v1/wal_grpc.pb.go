// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: api/v1/wal.proto

package wal_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalClient is the client API for Wal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalClient interface {
	PublishEntryStream(ctx context.Context, in *PublishEntryRequest, opts ...grpc.CallOption) (Wal_PublishEntryStreamClient, error)
	LogEntry(ctx context.Context, in *LogEntryRequest, opts ...grpc.CallOption) (*LogEntryResponse, error)
	LogEntryStream(ctx context.Context, opts ...grpc.CallOption) (Wal_LogEntryStreamClient, error)
}

type walClient struct {
	cc grpc.ClientConnInterface
}

func NewWalClient(cc grpc.ClientConnInterface) WalClient {
	return &walClient{cc}
}

func (c *walClient) PublishEntryStream(ctx context.Context, in *PublishEntryRequest, opts ...grpc.CallOption) (Wal_PublishEntryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wal_ServiceDesc.Streams[0], "/munchkin.v1.Wal/PublishEntryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &walPublishEntryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wal_PublishEntryStreamClient interface {
	Recv() (*PublishEntryResponse, error)
	grpc.ClientStream
}

type walPublishEntryStreamClient struct {
	grpc.ClientStream
}

func (x *walPublishEntryStreamClient) Recv() (*PublishEntryResponse, error) {
	m := new(PublishEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walClient) LogEntry(ctx context.Context, in *LogEntryRequest, opts ...grpc.CallOption) (*LogEntryResponse, error) {
	out := new(LogEntryResponse)
	err := c.cc.Invoke(ctx, "/munchkin.v1.Wal/LogEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walClient) LogEntryStream(ctx context.Context, opts ...grpc.CallOption) (Wal_LogEntryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wal_ServiceDesc.Streams[1], "/munchkin.v1.Wal/LogEntryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &walLogEntryStreamClient{stream}
	return x, nil
}

type Wal_LogEntryStreamClient interface {
	Send(*LogEntryRequest) error
	Recv() (*LogEntryResponse, error)
	grpc.ClientStream
}

type walLogEntryStreamClient struct {
	grpc.ClientStream
}

func (x *walLogEntryStreamClient) Send(m *LogEntryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *walLogEntryStreamClient) Recv() (*LogEntryResponse, error) {
	m := new(LogEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WalServer is the server API for Wal service.
// All implementations must embed UnimplementedWalServer
// for forward compatibility
type WalServer interface {
	PublishEntryStream(*PublishEntryRequest, Wal_PublishEntryStreamServer) error
	LogEntry(context.Context, *LogEntryRequest) (*LogEntryResponse, error)
	LogEntryStream(Wal_LogEntryStreamServer) error
	mustEmbedUnimplementedWalServer()
}

// UnimplementedWalServer must be embedded to have forward compatible implementations.
type UnimplementedWalServer struct {
}

func (UnimplementedWalServer) PublishEntryStream(*PublishEntryRequest, Wal_PublishEntryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishEntryStream not implemented")
}
func (UnimplementedWalServer) LogEntry(context.Context, *LogEntryRequest) (*LogEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEntry not implemented")
}
func (UnimplementedWalServer) LogEntryStream(Wal_LogEntryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogEntryStream not implemented")
}
func (UnimplementedWalServer) mustEmbedUnimplementedWalServer() {}

// UnsafeWalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalServer will
// result in compilation errors.
type UnsafeWalServer interface {
	mustEmbedUnimplementedWalServer()
}

func RegisterWalServer(s grpc.ServiceRegistrar, srv WalServer) {
	s.RegisterService(&Wal_ServiceDesc, srv)
}

func _Wal_PublishEntryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishEntryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalServer).PublishEntryStream(m, &walPublishEntryStreamServer{stream})
}

type Wal_PublishEntryStreamServer interface {
	Send(*PublishEntryResponse) error
	grpc.ServerStream
}

type walPublishEntryStreamServer struct {
	grpc.ServerStream
}

func (x *walPublishEntryStreamServer) Send(m *PublishEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wal_LogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalServer).LogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/munchkin.v1.Wal/LogEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalServer).LogEntry(ctx, req.(*LogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wal_LogEntryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WalServer).LogEntryStream(&walLogEntryStreamServer{stream})
}

type Wal_LogEntryStreamServer interface {
	Send(*LogEntryResponse) error
	Recv() (*LogEntryRequest, error)
	grpc.ServerStream
}

type walLogEntryStreamServer struct {
	grpc.ServerStream
}

func (x *walLogEntryStreamServer) Send(m *LogEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *walLogEntryStreamServer) Recv() (*LogEntryRequest, error) {
	m := new(LogEntryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Wal_ServiceDesc is the grpc.ServiceDesc for Wal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "munchkin.v1.Wal",
	HandlerType: (*WalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogEntry",
			Handler:    _Wal_LogEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishEntryStream",
			Handler:       _Wal_PublishEntryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogEntryStream",
			Handler:       _Wal_LogEntryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/wal.proto",
}
